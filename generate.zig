const std = @import("std");

pub fn addConfigFiles(b: *std.Build, wf: *std.Build.Step.WriteFile) void {
    const build_zon = @import("build.zig.zon");
    const version = build_zon.version;

    // Generate config_package.h
    const config_package_content = std.fmt.allocPrint(b.allocator,
        \\// Generated by Zig build system
        \\#ifndef VERILATOR_CONFIG_PACKAGE_H_
        \\#define VERILATOR_CONFIG_PACKAGE_H_
        \\
        \\#define HAVE_CONFIG_PACKAGE 1
        \\
        \\#define PACKAGE_NAME "Verilator"
        \\#define PACKAGE_STRING "Verilator {s}"
        \\#define PACKAGE_TARNAME "verilator"
        \\#define PACKAGE_URL "https://verilator.org"
        \\#define PACKAGE_VERSION "{s}"
        \\#define PACKAGE_VERSION_NUMBER_STRING "{s}"
        \\
        \\#define CFG_WITH_CCWARN 1
        \\#define CFG_WITH_LONGTESTS 1
        \\
        \\#endif
        \\
    , .{ version, version, version }) catch @panic("OOM");

    _ = wf.add("config_package.h", config_package_content);

    // Generate config_rev.h - extract git hash from build.zig.zon dependency URL
    const git_rev = extractGitHash(build_zon.dependencies.verilator.url) orelse "zig-build";

    const config_rev_content = std.fmt.allocPrint(b.allocator,
        \\// Generated by Zig build system
        \\#ifndef VERILATOR_CONFIG_REV_H_
        \\#define VERILATOR_CONFIG_REV_H_
        \\
        \\#define DTVERSION_rev "{s}"
        \\
        \\#endif
        \\
    , .{git_rev}) catch @panic("OOM");

    _ = wf.add("config_rev.h", config_rev_content);
}

pub fn generateVerilatedMk(b: *std.Build, upstream: *std.Build.Dependency) std.Build.LazyPath {
    const process_cmd = b.addSystemCommand(&[_][]const u8{"python3"});

    process_cmd.addFileArg(b.path("process_template.py"));
    process_cmd.addFileArg(upstream.path("include/verilated.mk.in"));

    return process_cmd.addOutputFileArg("verilated.mk");
}

pub fn generateVerilatedConfigH(b: *std.Build, upstream: *std.Build.Dependency) std.Build.LazyPath {
    const process_cmd = b.addSystemCommand(&[_][]const u8{"python3"});

    process_cmd.addFileArg(b.path("process_template.py"));
    process_cmd.addFileArg(upstream.path("include/verilated_config.h.in"));

    return process_cmd.addOutputFileArg("verilated_config.h");
}

fn extractGitHash(url: []const u8) ?[]const u8 {
    // URL format: "git+https://github.com/verilator/verilator#<hash>"
    const hash_start = std.mem.lastIndexOf(u8, url, "#") orelse return null;
    if (hash_start + 1 >= url.len) return null;
    const hash = url[hash_start + 1 ..];
    // Return first 7 chars like git describe --always
    if (hash.len >= 7) {
        return hash[0..7];
    }
    return hash;
}
